{
	"info": {
		"_postman_id": "07c1ab9c-6c8f-40fc-8a9b-6c81349bc120",
		"name": "E2E(teacher/student workflow)",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "27210890",
		"_collection_link": "https://speeding-desert-282348.postman.co/workspace/ASK~362afb79-1be3-4896-94c3-e1402e705e8a/collection/27210890-07c1ab9c-6c8f-40fc-8a9b-6c81349bc120?action=share&source=collection_link&creator=27210890"
	},
	"item": [
		{
			"name": "sign-in(teacher)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"pm.environment.set(\"teacherToken\", jsonData.token);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"email\": \"amr916@byui.me\",\r\n  \"password\": \"tester321\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{stageUrl}}/sign-in"
			},
			"response": []
		},
		{
			"name": "Create new quiz",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"pm.environment.set(\"quizId\", jsonData.id)\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{teacherToken}}"
					}
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"NEWTEST\",\r\n  \"totalScore\": 18,\r\n  \"passingPercentage\": 75,\r\n  \"showStopperQuestion\": 1,\r\n  \"questions\": [\r\n    {\r\n      \"type\": \"TEXTUAL\",\r\n      \"question\": \"What is your name?\",\r\n      \"score\": 5\r\n    },\r\n    {\r\n      \"type\": \"SINGLE_CHOICE\",\r\n      \"question\": \"Which city is city largest in California?\",\r\n      \"score\": 7,\r\n      \"answer\": 2,\r\n      \"hasOtherOption\": false,\r\n      \"options\": [\r\n        \"San Francisco\",\r\n        \"Sacramento\",\r\n        \"Los Angeles\",\r\n        \"Redding\"\r\n      ]\r\n    },\r\n    {\r\n      \"type\": \"MULTIPLE_CHOICE\",\r\n      \"question\": \"Who was apple founded by?\",\r\n      \"score\": 6,\r\n      \"answers\": [\r\n        0,\r\n        1,\r\n        2\r\n      ],\r\n      \"hasOtherOption\": true,\r\n      \"options\": [\r\n        \"Steve Jobs\",\r\n        \"Steve Wozniak\",\r\n        \"Ronald Wayne\",\r\n        \"Ronald Reagan\"\r\n      ]\r\n    }\r\n  ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{stageUrl}}/quiz"
			},
			"response": []
		},
		{
			"name": "Quizzes(returns list of all quizzes)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Validate test creation\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[jsonData.length -1].name).to.eql(\"NEWTEST\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{teacherToken}}"
					}
				},
				"method": "GET",
				"header": [],
				"url": "{{stageUrl}}/quizzes"
			},
			"response": []
		},
		{
			"name": "Returns all users",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{teacherToken}}"
					}
				},
				"method": "GET",
				"header": [],
				"url": "{{stageUrl}}/users"
			},
			"response": []
		},
		{
			"name": "Create new assignment",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status validation\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[0].status).to.eql(\"ASSIGNED\");\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"pm.environment.set(\"assignmentID\", jsonData[0].id);\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"pm.environment.set(\"assignmentGroupID\", jsonData[0].assignmentGroupID);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{teacherToken}}"
					}
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"quizId\": {{quizId}},\r\n  \"userIds\": [{{studentId}}]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{stageUrl}}/assignment"
			},
			"response": []
		},
		{
			"name": "Returns all assignments",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Validate assignment creation\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[jsonData.length - 1].name).to.eql(pm.iterationData.get(\"quizName\"));\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{teacherToken}}"
					}
				},
				"method": "GET",
				"header": [],
				"url": "{{stageUrl}}/assignments"
			},
			"response": []
		},
		{
			"name": "sign-in(student)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"pm.environment.set(\"studentToken\", jsonData.token);\r",
							"\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"pm.environment.set(\"studentId\", jsonData.user.id);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"email\": \"sadamine@cuanka.id\",\r\n  \"password\": \"123Tester\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{stageUrl}}/sign-in"
			},
			"response": []
		},
		{
			"name": "Assignments that need to be completed by Student",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"My assignments validation\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[jsonData.length - 1].name).to.eql(pm.iterationData.get(\"quizName\"));\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{studentToken}}"
					}
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{stageUrl}}/my-assignments"
			},
			"response": []
		},
		{
			"name": "Submit Assignment",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Result validation\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"   pm.expect(jsonData[jsonData.length - 1].result).to.eql(\"PENDING\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{studentToken}}"
					}
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"assignmentId\": {{assignmentID}},\r\n    \"answers\": [\r\n        {\r\n            \"textAnswer\": \"Yana\",\r\n            \"answer\": null\r\n        },\r\n        {\r\n            \"textAnswer\": \"\",\r\n            \"answer\": 2\r\n        },\r\n        {\r\n            \"textAnswer\": \"\",\r\n            \"answer\": [\r\n                0,\r\n                1\r\n            ]\r\n        }\r\n    ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{stageUrl}}/submit-assignment"
			},
			"response": []
		},
		{
			"name": "Submitted assignments",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"Validate assignment submition\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[jsonData.length -1].id).to.eql(pm.environment.get(\"assignmentID\"));\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Result validation\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"   pm.expect(jsonData[jsonData.length - 1].result).to.eql(\"PENDING\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{studentToken}}"
					}
				},
				"method": "GET",
				"header": [],
				"url": "{{stageUrl}}/my-grades"
			},
			"response": []
		},
		{
			"name": "Grades assignment",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status check\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[0].status).to.eql(\"GRADED\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{teacherToken}}"
					}
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"summary\": \"all answers are correct\",\r\n  \"result\": \"PASSED\",\r\n  \"grades\": [\r\n    {\r\n      \"comment\": \"!\",\r\n      \"additionalScore\": 5\r\n    }\r\n  ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{stageUrl}}/assignment/{{assignmentID}}"
			},
			"response": []
		},
		{
			"name": "Delete an assignment",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Message validation\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message).to.eql(\"Assignment was deleted\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{teacherToken}}"
					}
				},
				"method": "DELETE",
				"header": [],
				"url": "{{stageUrl}}/assignment/{{assignmentGroupID}}"
			},
			"response": []
		}
	]
}